{
  "id": "CPDbfDmbkE76",
  "parentId": "CPP4Py79E9fy",
  "index": 8,
  "content": "\"(module my-splicing racket\\n  (provide \\n    ; my-#%app\\n  (rename-out [my-#%app #%app])\\n  ; my-#%app\\n  ; #%module-begin\\n  ; #%datum\\n  ; #%top\\n  ; require\\n  (except-out (all-from-out racket)\\n                     #%app)\\n  )\\n  \\n  (require (for-syntax syntax/parse racket))\\n  (define-syntax-rule (#%dot obj-expr method-id)\\n    (let ([obj obj-expr])\\n      (lambda args (send/apply obj method-id args))))\\n  \\n  (begin-for-syntax\\n    (define-splicing-syntax-class maybe-splicing\\n      #:datum-literals (..)\\n      ;; see if it ends with ....\\n      (pattern (~seq pat ..)\\n               #:with x #`pat)\\n      ;; FIXME this might be keyword\\n      (pattern (~seq pat) #:with x #'(list pat))))\\n\\n  (define-syntax (my-#%app stx)\\n    (syntax-parse\\n      stx\\n      [(_ proc (~alt (~seq key:keyword value)\\n                     (~seq arg:maybe-splicing)) ...)\\n       #`(#%app apply proc (append arg.x ...)\\n                (~@ key value) ...)]))\\n  )\\n\"",
  "column": 1,
  "fold": false,
  "thundar": false,
  "utility": false,
  "name": "",
  "lang": "racket",
  "type": "CODE",
  "result": "null",
  "stdout": "",
  "error": "null",
  "imports": "{}",
  "exports": "{}",
  "midports": "{}",
  "repoId": "102c7cad-cc6a-4ac2-b30c-d5e168c069bf"
}